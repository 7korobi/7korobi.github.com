<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rails | 7korobi Blog]]></title>
  <link href="http://7korobi.github.com/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://7korobi.github.com/"/>
  <updated>2012-09-19T19:14:49+09:00</updated>
  <id>http://7korobi.github.com/</id>
  <author>
    <name><![CDATA[ななころび]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[rubykaigi2012 Ruby on Rails 関連セッション]]></title>
    <link href="http://7korobi.github.com/blog/2012/09/18/session-ruby-on-rails/"/>
    <updated>2012-09-18T12:00:00+09:00</updated>
    <id>http://7korobi.github.com/blog/2012/09/18/session-ruby-on-rails</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/sprk2012/sprk2012-cfp">札幌rubykaigi2012</a></p>

<h1>Rails3 レシピブック外伝</h1>

<p><a href="http://www.ustream.tv/recorded/25419544">動画</a></p>

<h1>RubyやLinux対応を積極的に進めるマイクロソフトのオープンソース&lt;3(LOVE)戦略</h1>

<p><a href="http://www.ustream.tv/recorded/25394761">動画</a></p>

<p>Windows 64bit用に、artonさん作のプラットフォーム「能楽堂」の紹介がある。イチから作り、IISとオサラバしたとのこと。</p>

<h1>Squaleの裏側</h1>

<p>SqualeというPAASの内部構造
<a href="http://www.ustream.tv/recorded/25395947">動画</a></p>

<ul>
<li>Ruby Sinatra Rails publish &amp; deploy.</li>
<li>サーバーセットアップを忘れてコードに専念！</li>
<li>ライトユーザーの敷居を下げるのが目標</li>
</ul>


<p>Amazon EC2 instance上にサーバー群を構成している。
EC2 Instance を仮想コンテナで区切っている。
(メモリを多く使うので、M2 large などを使う。）</p>

<h2>構成</h2>

<ul>
<li>Nginx</li>
<li>Unicorn</li>
<li>SSHD</li>
<li>Supervisord</li>
<li>paperboy-sqale</li>
</ul>


<h2>Containers</h2>

<ul>
<li>made by LXC</li>
<li>仮想環境で動く（Heroku Dynos と同じ）</li>
<li>監視は、プロセスの動作しか見ていない（今後、port監視など強化したい。）</li>
</ul>


<h2>セキュリティ</h2>

<ul>
<li>tcp port bind を制限し、一般Userからは仕掛けられなくする。</li>
<li>utp port はそのまま。</li>
<li>linux kernel patch   1024 → 65535</li>
</ul>


<h2>WebProxy</h2>

<p><a href="http://bit.ly/UHbHlb">技術情報</a></p>

<ul>
<li>redis 動作nginx のポート番号を管理</li>
<li>nginx ドメイン名からポート番号を引き当てる</li>
<li>location をコンテナの状況で分岐処理する。</li>
</ul>


<h2>failover.lua</h2>

<ul>
<li>コンテナ停止時、502が発生するので、フェイルオーバー処理に移る</li>
<li>ダウンを検知したので、ダウンコンテナとして把握しておく</li>
</ul>


<h2>dynamic-proxy.lua</h2>

<ul>
<li>ダウンしたコンテナには接続を振らない</li>
</ul>


<h2>SSH Router</h2>

<p><a href="http://github.com/mizzy/openssh-script-auth">技術情報</a></p>

<ul>
<li>git  -> Git Server</li>
<li>sftp -> File Server</li>
<li>ssh  -> Container</li>
</ul>


<p>このルーティングを実現する仕組み。</p>

<ul>
<li>AuthorizedKeysScript</li>
<li>適切にサーバー名、パス情報を修正して実行</li>
<li>鍵情報の実態はMySQLで管理</li>
</ul>


<h2>Deploy Servers</h2>

<p><a href="http://bit.ly/NBbj9F">技術情報</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rubykaigi2012 Ruby on Rails The Bad Parts]]></title>
    <link href="http://7korobi.github.com/blog/2012/09/18/session-dci/"/>
    <updated>2012-09-18T12:00:00+09:00</updated>
    <id>http://7korobi.github.com/blog/2012/09/18/session-dci</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/sprk2012/sprk2012-cfp">札幌rubykaigi2012</a></p>

<p><a href="http://www.ustream.tv/recorded/25420080">動画</a></p>

<p>railsの理想のひとつにclean code（整頓されたプログラム）があります。
けど現実のプロダクトでは難しいよね。</p>

<p>今のRailsは、足りない！</p>

<h3>Rails問題点 ⇨ 解決案</h3>

<ul>
<li>Helperが大きすぎる ⇨ Decolator</li>
<li>partialが多すぎる  ⇨ cells</li>
<li>Modelが太り過ぎる  ⇨ ライブラリ化、Acivity Layer</li>
</ul>


<p>こうした整理を行った手法を、Data-Context-Interaction(DCI)と呼ぶ。</p>

<h3>Helperは我々を助けてくれない</h3>

<ul>
<li>viewは、それぞれ独立でいるのが理想</li>
<li>共通のHelperとか…</li>
<li>Decolator を使おう！

<ul>
<li><a href="https://github.com/jcasimir/draper">Draper</a>

<ul>
<li>メソッドが変わってしまう</li>
<li>associated objects に対しても自動的にいける</li>
</ul>
</li>
<li><a href="https://github.com/amatsuda/active_decorator">ActiveDecorator</a></li>
</ul>
</li>
</ul>


<h3>partialはpartsではない</h3>

<p><a href="https://github.com/apotonick/cells">cells</a></p>

<ul>
<li>railsにview componentを提供するもの</li>
<li>mini controller、partial view で作る。</li>
</ul>


<p>app/cells/
  sidebar_cell.rb
  sidebar/recent_tags.html.haml</p>

<p>= render_cell :sidebar, :recent_tags
= rencer_cell :answers, :index, @questions</p>

<h3>modelになるには太り過ぎ</h3>

<ul>
<li>とあるモデルが500ライン以上！</li>
<li>アプリケーションのために小さなライブラリを作ろう</li>
<li>例：taggable とか</li>
</ul>


<h4>Activity Layer</h4>

<p>ユーザーアクティビティの単位でクラス化して、module includeする。</p>

<ul>
<li>複数のモデルが絡むロジックをどこに置くか？</li>
<li>class My::AnswerAcceptingsController#update</li>
<li>class AcceptAnswerActivity#do_process</li>
</ul>


<p>Common Point of Common Pitfalls
アプリケーションロジックの適切な置き場所を、railsが提供していないという問題。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TRPG on 人狼議事]]></title>
    <link href="http://7korobi.github.com/blog/2012/02/26/trpg-on-giji/"/>
    <updated>2012-02-26T13:38:00+09:00</updated>
    <id>http://7korobi.github.com/blog/2012/02/26/trpg-on-giji</id>
    <content type="html"><![CDATA[<h2>目的</h2>

<p>人狼議事のサイト上で、TRPGを遊べるようにする。
TRPGには、GMとプレイヤーがシナリオに参加し、集まったキャラクターたちが、次々とシーンを進んでゆき、シナリオを達成する。
人狼ゲームの考え方と対照すると、下のようになる。</p>

<ul>
<li><p>村＝シナリオ、村立て＝GM</p></li>
<li><p>１日＝１シーン</p></li>
</ul>


<h2>シナリオ</h2>

<p>シナリオはそれぞれタイトル、説明書きを持つ。
シナリオにはシーンが追加されていく。</p>

<h4>進行中</h4>

<p>進行中のシナリオは、下の特徴を持つ。</p>

<ul>
<li>独り言、内緒話、秘密シーンの閲覧に制限がある。</li>
</ul>


<h4>終了</h4>

<p>すべてのシーンが終了すると、シナリオも終了する。また、シナリオを終了すると、すべてのシーンが終了する。
終了したシナリオは下の特徴を持つ。</p>

<ul>
<li>シーン作成ができない。</li>
<li>すべての発言、シーンでの秘密が公開される。</li>
</ul>


<h2>シーン</h2>

<p>シーンは作成した順に並び、それぞれがタイトルを持つ。
シーンにはGMが設定する、下の４種類のタイプがある。</p>

<p>開始から２４時間が過ぎると、このシーンはCLOSEに変化する。</p>

<h4>OPEN</h4>

<p>公開。
プロローグを含む（プロローグでは参加操作が可能）。
各キャラクターは自分の操作か、GMの操作でこのシーンに参加してよい。</p>

<h4>INVITE</h4>

<p>招待。
各キャラクターはGMの操作でこのシーンに参加してよい。</p>

<h4>SECRET</h4>

<p>秘密。
各キャラクターはGMの操作でこのシーンに参加してよい。
発言内容は、参加中のキャラクターにのみ閲覧可能。</p>

<h4>CLOSE</h4>

<p>終了。
キャラクターは参加できない。
キャラクターは独り言のみ投稿できる。</p>

<h2>発言</h2>

<p>キャラクターやGMが投稿する発言は、下記の種類がある。</p>

<ul>
<li><p>発言（コール）</p></li>
<li><p>発言（キャラクターロール）</p></li>
<li><p>内緒話</p></li>
<li><p>独り言</p></li>
<li><p>GM投稿</p></li>
<li><p>GM独話</p></li>
<li><p>管理人投稿</p></li>
<li><p>メモ（GM）</p></li>
<li><p>メモ（プレイヤー発言）</p></li>
</ul>


<h2>キャラクター</h2>

<p>参加したプレイヤーは、ひとつのキャラクターを持つ。
キャラクターはそれぞれ、ひとつのシーンに参加中となる。</p>

<p>キャラクターにはそれぞれ、下の操作が可能。</p>

<ul>
<li><p>発言（コール）</p></li>
<li><p>発言（キャラクターロール）</p></li>
<li><p>内緒話</p></li>
<li><p>独り言</p></li>
<li><p>メモ（プレイヤー発言）</p></li>
<li><p>現在より後の、公開シーンへの移動</p></li>
</ul>


<h2>GM</h2>

<p>村を建てたプレイヤーは、その村のゲームマスターとなる。
ゲームマスターはすべてのシーンで、下の操作が可能。</p>

<ul>
<li><p>GM投稿（ＮＰＣ発言、システム、状況ロール などに使う。）</p></li>
<li><p>GM独話（キャラクターに秘密でサイコロを振る、などの行為に使う。）</p></li>
<li><p>メモ（GM）</p></li>
<li><p>現在より後の、終了以外のシーンへの、指定キャラクターの移動</p></li>
<li><p>新しいシーンを作り、タイトルをつける。</p></li>
<li><p>シーンの編集</p></li>
<li><p>シナリオの編集</p></li>
<li><p>シナリオの終了</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rails2_remember]]></title>
    <link href="http://7korobi.github.com/blog/2012/01/26/rails2-remember/"/>
    <updated>2012-01-26T13:23:00+09:00</updated>
    <id>http://7korobi.github.com/blog/2012/01/26/rails2-remember</id>
    <content type="html"><![CDATA[<p>思い出したほうがよさそうな、Rails2の機能を三つほど。</p>

<p>・<a href="http://apidock.com/rails/Module/delegate">delegate</a>
・<a href="http://apidock.com/rails/ActiveSupport/Memoizable/memoize">memoize</a>
・<a href="http://apidock.com/rails/ActionDispatch/Rescue/rescue_from">rescue_from</a></p>

<h2>delegate</h2>

<p>``` ruby
class A
  attr_reader :b
  def initialize</p>

<pre><code>@b = OpenStruct.new(
  foo: 'b.foo',
  bar: 'b.bar',
  baz: 'b.baz'
)
</code></pre>

<p>  end
  delegate :foo, :to=>:b
  delegate :bar, :to=>:b, :prefix=>true
  delegate :baz, :to=>:b, :prefix=>"target"
  delegate :quod, :to=>:@b, :prefix=>"target"
end</p>

<h1>ArgumentError: Can only automatically set the delegation prefix when delegating to a method.</h1>

<p>a = A.new
a.foo        # => b.foo
a.b_bar      # => b.bar
a.target_baz # => b.baz
a.target_quod # NoMethodError: undefined method `target_quod' for ...</p>

<p>```</p>

<h2>memoize</h2>

<p>``` ruby
class A
  extend ActiveSupport::Memoizable
  def foo(a,b)</p>

<pre><code>puts 'a.foo exec!'
a + b
</code></pre>

<p>  end
  memoize :foo
end</p>

<p>a = A.new
a.foo(1,2)      # a.foo exec! => 3
a.foo(1,2)      #             => 3
a.foo(1,2,true) # a.foo exec! => 3
a.foo(2,2)      # a.foo exec! => 4
a.foo(2,2)      #             => 4
a.instance_variable_get(:@_memoized_foo) # {[1,2] => 3, [2,2] => 4}
```</p>

<h2>rescue_from</h2>

<p>``` ruby
class A
  include ActiveSupport::Rescuable
  class FetchException &lt; RuntimeError; end
  class StoreException &lt; RuntimeError; end</p>

<p>  rescue_from FetchException do |e| @error = "取得失敗: #{e}" end
  rescue_from StoreException do |e| @error = "保存失敗: #{e}" end</p>

<p>  def fetch</p>

<pre><code>raise FetchException if rand(2) == 0 
</code></pre>

<p>  end</p>

<p>  def store</p>

<pre><code>raise StoreException if rand(2) == 0 
</code></pre>

<p>  end</p>

<p>  def execute</p>

<pre><code>fetch
store
</code></pre>

<p>  rescue Exception => error</p>

<pre><code>rescue_with_handler(error) ? @error : raise
</code></pre>

<p>  end
end</p>

<p>class B &lt; A
  class StoreException &lt; RuntimeError; end
  rescue_from StoreException do |e| @error = "保存失敗: #{e}" end</p>

<p>  def store</p>

<pre><code>raise StoreException if rand(2) == 0 
</code></pre>

<p>  end<br/>
end</p>

<p>a = A.new
a.execute # => たまに "取得失敗: A::FetchException"
a.execute # => たまに "保存失敗: A::FetchException"
b = B.new
b.execute # => たまに "取得失敗: A::FetchException"
b.execute # => たまに "保存失敗: B::FetchException"
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[formtastic]]></title>
    <link href="http://7korobi.github.com/blog/2011/12/11/formtastic/"/>
    <updated>2011-12-11T01:25:00+09:00</updated>
    <id>http://7korobi.github.com/blog/2011/12/11/formtastic</id>
    <content type="html"><![CDATA[<p>Formtasticというプラグインはなかなか便利です。
モデルの変更にあわせて自動でフォームの項目を調節してくれる、inputsというメソッドが最高にありがたい。</p>

<p>…ですが、これ、ActiveRecordには対応しているんですが、MongoDBだと動かないんですね。
他の変更も含め、Gemに固めてやろうといろいろ模索していますが、とりあえず最低限なにが必要なのかを覚書き。</p>

<p>``` ruby
module Mongoid
  module Document</p>

<pre><code>def self.included(base)
  def base.field(name, options = {})
    super
    記録を取る
  end
  def base.referenced_in(name, options = {})
    super
    記録を取る
  end
  def base.references_many(name, options = {})
    super
    記録を取る
  end
  def base.embedded_in(name, options = {})
    super
    記録を取る
  end
  def base.embeds_many(name, options = {})
    super
    記録を取る
  end
  def base.references_and_referenced_in_many(name, options = {})
    super
    記録を取る
  end
  base.class_eval do
    def column_for_attribute(attribute_name)
      なんとかする
    end
  end
  def base.content_columns
    なんとかする
  end
  def base.reflections
    relations
  end
end
</code></pre>

<p>  end
end</p>

<p>module Formtastic
  module Inputs</p>

<pre><code>class ArrayInput
  include Base
  include Base::Stringish

  def to_html
    @object.each do |exp|
      input_wrapping do
        label_html &lt;&lt;
        どうにかする
      end
  end
end
</code></pre>

<p>  end
end</p>

<p>module Formtastic
  module Helpers</p>

<pre><code>module InputHelper
  protected
  def default_input_type(method, options = {})
    大幅に書き換え。
    ActiveRecordではありえないような、
    Array型などの入力用フォームに対応する。
  end
end
</code></pre>

<p>  end
end
```</p>

<p>けっこう長い！</p>

<p>実際にはもちろん、メソッド定義の中身も必要です。</p>
]]></content>
  </entry>
  
</feed>
